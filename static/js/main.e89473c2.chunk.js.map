{"version":3,"sources":["Context/RGBContext.tsx","Context/MenuContext.tsx","Helpers/localStorage.ts","Context/IconContext.tsx","Helpers/ColorConverters.ts","Component/Menu/MenuGradients.tsx","Component/Menu/RemoveGradientBtn.tsx","Component/Menu/MapMenuGradients.tsx","Component/Menu/Menu.tsx","Component/Colors/ColorDescription.tsx","Component/Colors/Colors.tsx","Component/Header/HeaderColorSelector.tsx","Component/Header/MenuController.tsx","Component/Header/HeaderUtils.tsx","Component/Header/Header.tsx","App.tsx","index.tsx"],"names":["RGBContext","createContext","rgbValues","background","colorOneHex","colorTwoHex","setRgbValues","MenuContext","slideMenu","isShowingMenu","setSlideMenu","setIsShowingMenu","getGradient","localStorage","getItem","saveGradient","gradient","oldGradient","JSON","parse","slice","length","every","value","i","updatedGradient","setItem","stringify","IconContext","copyIconClass","color_1","color_2","save","setCopyIconClass","componentToHex","component","hex","toString","rgbToHex","red","green","blue","setTextColor","hexColor","parseInt","substr","MenuGradients","savedGradient","useState","currentGradientOne","setCurrentGradientOne","currentGradientTwo","setCurrentGradientTwo","useEffect","className","style","color","RemoveGradientBtn","setSavedGradients","getGradients","rawGradient","useContext","removeSavedGradient","startIdx","e","target","index","removedRgbValues","splice","removeItem","title","onClick","MapMenuGradients","savedGradients","map","getSavedGradient","Menu","allSavedGradients","push","ColorDescription","redOne","greenOne","blueOne","redTwo","greenTwo","blueTwo","isShowingCopyOne","setIsShowingCopyOne","isShowingCopyTwo","setIsShowingCopyTwo","copyHex","navigator","clipboard","writeText","onMouseEnter","onMouseLeave","visibility","Colors","HeaderColorSelector","onChange","result","exec","r","g","b","hexToRgb","rgbValuescopy","name","type","MenuController","menuCssBreakpoint","window","screen","width","isHorizontalArrow","setIsHorizontalArrow","setTimeout","HeaderUtils","randomRGB","disabled","Header","Math","floor","random","App","setBackground","setColorOneHex","setColorTwoHex","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAUaA,G,YAAaC,wBAAwB,CAC9CC,UAAW,CAAC,EAAG,EAAG,GAClBC,WAAY,GACZC,YAAa,GACbC,YAAa,GACbC,aAAc,gBCNLC,EAAcN,wBAAwB,CAC/CO,UAAW,GACXC,eAAe,EACfC,aAAc,aACdC,iBAAkB,e,OCbTC,G,MAAc,kBAAqBC,aAAaC,QAAQ,cAIxDC,EAAe,SAACb,GACzB,IAAMc,EAAWJ,IACjB,GAAKI,EACA,CACD,IAAMC,EAAcC,KAAKC,MAAMH,GAE/B,GADuBC,EAAYG,MAAMH,EAAYI,OAAS,GAC3CC,OAAM,SAACC,EAAeC,GAAhB,OAA8BD,IAAUrB,EAAUsB,MACvE,OAEJ,IAAMC,EAAe,sBAAQR,GAAR,YAAwBf,IAEzCuB,EAAgBJ,OAAS,IACzBR,aAAaa,QAAQ,WAAYR,KAAKS,UAAUF,SAVzCZ,aAAaa,QAAQ,WAAYR,KAAKS,UAAUzB,K,OCCtD0B,EAAc3B,wBAAwB,CAC/C4B,cAAe,CAAEC,QAAS,GAAIC,QAAS,GAAIC,KAAM,IACjDC,iBAAkB,eCHhBC,EAAiB,SAACC,GAEpB,IAAMC,EAAMD,EAAUE,SAAS,IAC/B,OAAsB,IAAfD,EAAIf,OAAe,IAAMe,EAAMA,GAG7BE,EAAW,SAACC,EAAaC,EAAeC,GAA7B,iBAChBP,EAAeK,IADC,OACML,EAAeM,IADrB,OAC8BN,EAAeO,KAYxDC,EAAe,SAACC,GAMzB,OAFkB,IAHRC,SAASD,EAASE,OAAO,EAAG,GAAI,IAGZ,IAFpBD,SAASD,EAASE,OAAO,EAAG,GAAI,IAEA,IADhCD,SAASD,EAASE,OAAO,EAAG,GAAI,KACQ,KAEnC,IAAO,OAAS,QCMpBC,EA9BqC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEnBC,mBAAS,IAFU,mBAEhEC,EAFgE,KAE5CC,EAF4C,OAGnBF,mBAAS,IAHU,mBAGhEG,EAHgE,KAG5CC,EAH4C,KAWvE,OALAC,qBAAU,WACNH,EAAsBZ,EAASS,EAAc,GAAIA,EAAc,GAAIA,EAAc,KACjFK,EAAsBd,EAASS,EAAc,GAAIA,EAAc,GAAIA,EAAc,OAClF,CAACA,IAGA,cAAC,WAAD,UACKE,GAAsBE,GACnB,eAAC,WAAD,WACI,sBAAKG,UAAU,0BAA0BC,MAAO,CAAEC,MAAOd,EAAaO,IAAtE,UACI,8CAAeA,KACf,sBAAMK,UAAU,4BAAhB,yBAAsDP,EAAc,GAApE,aAA2EA,EAAc,GAAzF,aAAgGA,EAAc,GAA9G,UAGJ,sBAAKO,UAAU,0BAA0BC,MAAO,CAAEC,MAAOd,EAAaS,IAAtE,UACI,8CAAeA,KACf,sBAAMG,UAAU,4BAAhB,yBAAsDP,EAAc,GAApE,aAA2EA,EAAc,GAAzF,aAAgGA,EAAc,GAA9G,gBCkBTU,EAnC6C,SAAC,GAAyD,IAAvDjC,EAAsD,EAAtDA,EAAGkC,EAAmD,EAAnDA,kBAAmBC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAEvF1D,EAAc2D,qBAAW7D,GAAzBE,UAFyG,EAGrE2D,qBAAWjC,GAA/CK,EAHyG,EAGzGA,iBAAkBJ,EAHuF,EAGvFA,cAEpBiC,EAAsB,SAACC,EAAkBC,GAC3C,GAA+C,iBAA1CA,EAAEC,OAA0BX,WAA8E,0BAA7CU,EAAEC,OAA6BX,UAAuC,CACpI,IACMY,EADsB,EACdH,EACRI,EAAmBP,EAAYQ,OAAOF,EAAO,GJnBrBrD,aAAawD,WAAW,YIuBlDT,EAAYvC,OAAS,GACrBN,EAAa6C,GAGjBF,EAAkBC,EAAaC,IAG3B1D,EAAUoB,OAAM,SAACC,EAAeC,GAAhB,OAA8BD,IAAU4C,EAAiB3C,OACzES,EAAiB,2BAAKJ,GAAN,IAAqBG,KAAM,mBAIvD,OACI,wBACIsB,UAAU,wBACVgB,MAAM,kBACNC,QAAS,SAACP,GAAD,OAAOF,EAAoBtC,EAAGwC,IAH3C,SAII,mBAAGV,UAAU,oBCHVkB,EA1B2C,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,eAAgBf,EAAmD,EAAnDA,kBAAmBE,EAAgC,EAAhCA,YAAaD,EAAmB,EAAnBA,aAEjGrD,EAAiBuD,qBAAW7D,GAA5BM,aAFoH,EAGhFuD,qBAAWjC,GAA/CK,EAHoH,EAGpHA,iBAAkBJ,EAHkG,EAGlGA,cAS1B,OACI,cAAC,WAAD,UACK4C,EAAeC,KAAI,SAAC3B,EAAyBvB,GAA1B,OAChB,qBAAa+C,QAAS,SAACP,GAAD,OAVT,SAAChD,EAAoBgD,GACK,iBAA1CA,EAAEC,OAA0BX,WAA2E,0BAA1CU,EAAEC,OAA0BX,YAC1FhD,EAAaU,GACbiB,EAAiB,2BAAKJ,GAAN,IAAqBG,KAAM,mBAOV2C,CAAiB5B,EAAeiB,IAAIV,UAAU,wBAAwBC,MAAO,CAAEpD,WAAW,kCAAD,OAAoC4C,EAAc,GAAlD,aAAyDA,EAAc,GAAvE,aAA8EA,EAAc,GAA5F,sBAA4GA,EAAc,GAA1H,aAAiIA,EAAc,GAA/I,aAAsJA,EAAc,GAApK,UAAtH,SACI,sBAAKO,UAAU,wBAAf,UACI,cAAC,EAAD,CAAeP,cAAeA,IAC9B,cAAC,EAAD,CAAmBvB,EAAGA,EAAGkC,kBAAmBA,EAAmBC,aAAcA,EAAcC,YAAaA,QAHtGpC,SC8BXoD,EAhDmB,WAE9B,IAAMhB,EAAc1C,KAAKC,MAAMP,KAFK,EAGeoC,mBAAS,IAHxB,mBAG7ByB,EAH6B,KAGbf,EAHa,KAK5BlD,EAAcqD,qBAAWtD,GAAzBC,UAEFmD,EAAe,SAAC3C,GAClB,IAAM6D,EAA2B,GAEjC,GAAI7D,EAASK,OADS,EACe,CAEjC,IADA,IAAIG,EAAI,EACDA,EAAIR,EAASK,QAChBwD,EAAkBC,KAAK,CAAC9D,EAASQ,GAAIR,EAASQ,EAAI,GAAIR,EAASQ,EAAI,GAAIR,EAASQ,EAAI,GAAIR,EAASQ,EAAI,GAAIR,EAASQ,EAAI,KACtHA,GALc,EAOlB,OAAOqD,EACJ,OARe,IAQX7D,EAASK,QAChBwD,EAAkBC,KAAlB,YAA2B9D,IACpB6D,GACGA,GAUlB,OAPAxB,qBAAU,WACFO,GAAuC,EAAxBa,EAAepD,SAAeuC,EAAYvC,OACzDqC,EAAkBC,EAAaC,IACzBA,GACNF,EAAkB,MACvB,CAACE,EAAaa,EAAepD,SAG5B,sBAAKiC,UAAS,yBAAoB9C,GAAlC,UAEI,oBAAI8C,UAAU,aAAd,6BACA,qBAAKA,UAAU,cAEf,qBAAKA,UAAU,0BAAf,SAC+B,IAA1BmB,EAAepD,OACZ,qBAAKiC,UAAU,aAAf,gCAEA,cAAC,EAAD,CAAkBmB,eAAgBA,EAAgBf,kBAAmBA,EAAmBE,YAAaA,EAAaD,aAAcA,UCgBrIoB,EAzD2C,WAAO,IAAD,EAEZlB,qBAAW7D,GAAnDE,EAFoD,EAEpDA,UAAWE,EAFyC,EAEzCA,YAAaC,EAF4B,EAE5BA,YAF4B,EAGhBwD,qBAAWjC,GAA/CC,EAHoD,EAGpDA,cAAeI,EAHqC,EAGrCA,iBAHqC,cAKG/B,EALH,GAKrD8E,EALqD,KAK7CC,EAL6C,KAKnCC,EALmC,KAK1BC,EAL0B,KAKlBC,EALkB,KAKRC,EALQ,OAOZrC,oBAAS,GAPG,mBAOrDsC,EAPqD,KAOnCC,EAPmC,OAQZvC,oBAAS,GARG,mBAQrDwC,EARqD,KAQnCC,EARmC,KAUtDC,EAAU,WACRJ,GAA8C,iBAA1BzD,EAAcC,SAClCG,EAAiB,2BAAKJ,GAAN,IAAqBC,QAAS,eAAgBC,QAAS,iBACvE4D,UAAUC,UAAUC,UAAUzF,IACvBoF,GAA8C,iBAA1B3D,EAAcE,UACzCE,EAAiB,2BAAKJ,GAAN,IAAqBC,QAAS,cAAeC,QAAS,kBACtE4D,UAAUC,UAAUC,UAAUxF,KAItC,OACI,qBAAKiD,UAAU,kBAAf,SACKlD,GAAeC,GACZ,sBAAKiD,UAAU,aAAf,UACI,qBACIA,UAAU,UACVC,MAAO,CAAEC,MAAOd,EAAatC,IAFjC,SAGI,sBACI0F,aAAc,kBAAMP,GAAqBD,IACzCS,aAAc,kBAAMR,GAAqBD,IAF7C,UAGI,sBAAKhC,UAAU,sBAAf,UACI,qBAAKA,UAAU,iBAAf,wBAAyClD,KACzC,qBAAKmD,MAAO,CAAEyC,WAAYV,EAAmB,UAAY,UAAzD,SAAqE,mBAAGhC,UAAS,UAAKzB,EAAcC,QAAnB,0BAAoDwC,MAAM,WAAWC,QAAS,kBAAMmB,YAEzK,qBAAKpC,UAAU,iBAAf,yBAA0C0B,EAA1C,aAAqDC,EAArD,aAAkEC,EAAlE,YAIR,qBACI5B,UAAU,UACVC,MAAO,CAAEC,MAAOd,EAAarC,IAFjC,SAGI,sBACIyF,aAAc,kBAAML,GAAqBD,IACzCO,aAAc,kBAAMN,GAAqBD,IAF7C,UAGI,sBAAKlC,UAAU,OAAf,UACK,qBAAKC,MAAO,CAAEyC,WAAYR,EAAmB,UAAY,UAAzD,SAAqE,mBAAGlC,UAAS,UAAKzB,EAAcE,QAAnB,0BAAoDuC,MAAM,WAAWC,QAAS,kBAAMmB,SACtK,qBAAKpC,UAAU,iBAAf,wBAAyCjD,QAE7C,qBAAKiD,UAAU,iBAAf,yBAA0C6B,EAA1C,aAAqDC,EAArD,aAAkEC,EAAlE,kBCjCbY,EAbuB,WAAO,IAEjC9F,EAAe0D,qBAAW7D,GAA1BG,WACAM,EAAkBoD,qBAAWtD,GAA7BE,cAER,OACI,sBAAK6C,UAAU,kBAAkBC,MAAO,CAAEpD,cAA1C,UACI,cAAC,EAAD,IACCM,GAAiB,cAAC,EAAD,QCwBfyF,G,MAlCiD,WAAO,IAAD,EAEJrC,qBAAW7D,GAAjEE,EAF0D,EAE1DA,UAAWE,EAF+C,EAE/CA,YAAaC,EAFkC,EAElCA,YAAaC,EAFqB,EAErBA,aAFqB,EAGtBuD,qBAAWjC,GAA/CC,EAH0D,EAG1DA,cAAeI,EAH2C,EAG3CA,iBAEjBkE,EAAW,SAACnC,GAEd,IAF2C,EPE3B,SAAC5B,GACrB,IAAMgE,EAAS,4CAA4CC,KAAKjE,GAChE,OAAOgE,EAAS,CACZE,EAAG1D,SAASwD,EAAO,GAAI,IACvBG,EAAG3D,SAASwD,EAAO,GAAI,IACvBI,EAAG5D,SAASwD,EAAO,GAAI,KACvB,KOL0BK,CADPzC,EAAEC,OAA4B1C,OAEzC+E,EAJmC,EAInCA,EAAGC,EAJgC,EAIhCA,EAAGC,EAJ6B,EAI7BA,EAGRE,EAAa,YAAOxG,GACkB,aAAvC8D,EAAEC,OAA4B0C,MAC/BD,EAActC,OAAO,EAAG,EAAGkC,EAAGC,EAAGC,GACjCvE,EAAiB,2BAAKJ,GAAN,IAAqBC,QAAS,cAAeE,KAAM,kBAEtB,aAAvCgC,EAAEC,OAA4B0C,OACpCD,EAActC,OAAO,EAAG,EAAGkC,EAAGC,EAAGC,GACjCvE,EAAiB,2BAAKJ,GAAN,IAAqBE,QAAS,cAAeC,KAAM,kBAIvE1B,EAAaoG,IAGjB,OACI,sBAAKpD,UAAU,uBAAf,UACI,uBAAOA,UAAU,wBAAwBsD,KAAK,QAAQD,KAAK,WAAWpF,MAAOnB,EAAa+F,SAAU,SAAAnC,GAAC,OAAImC,EAASnC,MAClH,uBAAOV,UAAU,wBAAwBsD,KAAK,QAAQD,KAAK,WAAWpF,MAAOlB,EAAa8F,SAAU,SAAAnC,GAAC,OAAImC,EAASnC,WCiB/G6C,EA/CuC,WAAO,IAEjD1G,EAAe0D,qBAAW7D,GAA1BG,WAFgD,EAGE0D,qBAAWtD,GAA7DE,EAHgD,EAGhDA,cAAeE,EAHiC,EAGjCA,iBAAkBD,EAHe,EAGfA,aACnCoG,EAAoBC,OAAOC,OAAOC,MAJgB,EAKNjE,oBAAS,GALH,mBAKjDkE,EALiD,KAK9BC,EAL8B,KAOxD9D,qBAAU,WAGFyD,EAAoB,MACpBK,GAAqB,KAC1B,CAACL,IAYJ,OACI,8BACKrG,EACG,wBACI6C,UAAU,cACVgB,MAAM,yBACNf,MAAO,CAAEpD,cACToE,QAAS,kBAXrB7D,EAAa,iBACb0G,YAAW,kBAAMzG,GAAiB,KAAQ,MAMlC,SAKKuG,EAAoB,mBAAG5D,UAAU,uBAA0B,mBAAGA,UAAU,wBAG7E,wBACIA,UAAU,cACVgB,MAAM,yBACNf,MAAO,CAAEpD,cACToE,QAAS,kBAxBrB5D,GAAiB,QACjBD,EAAa,YAmBL,SAKKwG,EAAoB,mBAAG5D,UAAU,sBAAyB,mBAAGA,UAAU,yBCc7E+D,EAnDiC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAEfzD,qBAAW7D,GAAnDE,EAFuD,EAEvDA,UAAWC,EAF4C,EAE5CA,WAAYG,EAFgC,EAEhCA,aAFgC,EAGnBuD,qBAAWjC,GAA/CC,EAHuD,EAGvDA,cAAeI,EAHwC,EAGxCA,iBACfxB,EAAkBoD,qBAAWtD,GAA7BE,cAEFmD,EAAc1C,KAAKC,MAAMP,KAoB/B,OACI,sBAAK0C,UAAU,cAAf,UACI,wBACIA,UAAU,2BACVgB,MAAM,kBACNf,MAAO,CAAEpD,cACToE,QAAS,kBAvBjBtC,EAAiB,CAAEH,QAAS,cAAeC,QAAS,cAAeC,KAAM,qBACzE1B,EAAagH,MAuBLC,SAAU9G,EALd,SAMI,mBAAG6C,UAAU,oBAGjB,wBACIA,UAAU,sBACVgB,MAAM,wBACNf,MAAO,CAAEpD,cACToE,QAAS,WA3BU,iBAAvB1C,EAAcG,OACdjB,EAAab,GACb+B,EAAiB,2BAAKJ,GAAN,IAAqBG,KAAM,oBA0BvCuF,YArBJ3D,GAAeA,EAAYvC,OAAS,OAC/BZ,EAeL,SAMI,mBAAG6C,UAAS,UAAKzB,EAAcG,UAGnC,cAAC,EAAD,QCrCGwF,EAXuB,SAAC,GAAmB,IAAjBF,EAAgB,EAAhBA,UACrC,OACI,qBAAKhE,UAAU,SAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAagE,UAAWA,UCGlCA,EAAwB,WAO5B,MAAO,CANQG,KAAKC,MAAsB,IAAhBD,KAAKE,UACdF,KAAKC,MAAsB,IAAhBD,KAAKE,UACjBF,KAAKC,MAAsB,IAAhBD,KAAKE,UACjBF,KAAKC,MAAsB,IAAhBD,KAAKE,UACdF,KAAKC,MAAsB,IAAhBD,KAAKE,UACjBF,KAAKC,MAAsB,IAAhBD,KAAKE,YAoCnBC,MAhCf,WAAgB,IAAD,EAEqB5E,mBAASsE,KAF9B,mBAENpH,EAFM,KAEKI,EAFL,OAGuB0C,mBAAS,IAHhC,mBAGN7C,EAHM,KAGM0H,EAHN,OAI6B7E,oBAAS,GAJtC,mBAINvC,EAJM,KAISE,EAJT,OAK6BqC,mBAAS,CAAElB,QAAS,cAAeC,QAAS,cAAeC,KAAM,gBAL9F,mBAKNH,EALM,KAKSI,EALT,OAMqBe,mBAAS,WAN9B,mBAMNxC,EANM,KAMKE,EANL,OAOyBsC,mBAAS,IAPlC,mBAON5C,EAPM,KAOO0H,EAPP,OAQyB9E,mBAAS,IARlC,mBAQN3C,EARM,KAQO0H,EARP,KAgBb,OANA1E,qBAAU,WACRwE,EAAc,kCAAD,OAAmC3H,EAAU,GAA7C,aAAoDA,EAAU,GAA9D,aAAqEA,EAAU,GAA/E,sBAA+FA,EAAU,GAAzG,aAAgHA,EAAU,GAA1H,aAAiIA,EAAU,GAA3I,UACb4H,EAAexF,EAASpC,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAC9D6H,EAAezF,EAASpC,EAAU,GAAIA,EAAU,GAAIA,EAAU,OAC7D,CAACA,IAGF,qBAAKoD,UAAU,MAAf,SACE,cAACtD,EAAWgI,SAAZ,CAAqBzG,MAAO,CAAErB,YAAWI,eAAcF,cAAaC,cAAaF,cAAjF,SACE,cAACI,EAAYyH,SAAb,CAAsBzG,MAAO,CAAEf,YAAWC,gBAAeC,eAAcC,oBAAvE,SACE,eAACiB,EAAYoG,SAAb,CAAsBzG,MAAO,CAAEM,gBAAeI,oBAA9C,UAEE,cAAC,EAAD,CAAQqF,UAAWA,IACnB,cAAC,EAAD,cC9CZW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e89473c2.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\ninterface IContext {\r\n    rgbValues: number[]\r\n    background: string,\r\n    colorOneHex: string,\r\n    colorTwoHex: string,\r\n    setRgbValues: React.Dispatch<React.SetStateAction<number[]>>,\r\n}\r\n\r\nexport const RGBContext = createContext<IContext>({\r\n    rgbValues: [0, 0, 0],\r\n    background: '',\r\n    colorOneHex: '',\r\n    colorTwoHex: '',\r\n    setRgbValues: () => { }\r\n})","import { createContext } from 'react'\r\n\r\ninterface IContext {\r\n    slideMenu: string,\r\n    isShowingMenu: boolean,\r\n    setSlideMenu: React.Dispatch<React.SetStateAction<string>>,\r\n    setIsShowingMenu: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const MenuContext = createContext<IContext>({\r\n    slideMenu: '',\r\n    isShowingMenu: false,\r\n    setSlideMenu: () => { },\r\n    setIsShowingMenu: () => { }\r\n})","export const getGradient = (): string | null => localStorage.getItem('gradient')\r\n\r\nexport const removeGradient = (): void => localStorage.removeItem('gradient')\r\n\r\nexport const saveGradient = (rgbValues: number[]): void => {\r\n    const gradient = getGradient()\r\n    if (!gradient) localStorage.setItem('gradient', JSON.stringify(rgbValues))\r\n    else {\r\n        const oldGradient = JSON.parse(gradient)\r\n        const latestGradient = oldGradient.slice(oldGradient.length - 6)\r\n        if (latestGradient.every((value: number, i: number) => value === rgbValues[i]))\r\n            return\r\n\r\n        const updatedGradient = ([...oldGradient, ...rgbValues])\r\n        //Allow up to 5 saved Gradients\r\n        if (updatedGradient.length < 31)\r\n            localStorage.setItem('gradient', JSON.stringify(updatedGradient))\r\n    }\r\n}\r\n","import { createContext } from 'react'\r\n\r\ninterface IContext {\r\n    copyIconClass: { color_1: string; color_2: string; save: string },\r\n    setCopyIconClass: React.Dispatch<React.SetStateAction<{ color_1: string; color_2: string; save: string }>>\r\n}\r\n\r\nexport const IconContext = createContext<IContext>({\r\n    copyIconClass: { color_1: '', color_2: '', save: '' },\r\n    setCopyIconClass: () => { }\r\n})","interface IHexToRgb {\r\n    r: number,\r\n    g: number,\r\n    b: number\r\n}\r\n\r\nconst componentToHex = (component: number): string => {\r\n    // Hex color code a base 16 number\r\n    const hex = component.toString(16)\r\n    return hex.length === 1 ? '0' + hex : hex\r\n}\r\n\r\nexport const rgbToHex = (red: number, green: number, blue: number): string =>\r\n    `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`\r\n\r\n\r\nexport const hexToRgb = (hex: string): IHexToRgb | null => {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : null;\r\n}\r\n\r\nexport const setTextColor = (hexColor: string): string => {\r\n    const r = parseInt(hexColor.substr(1, 2), 16);\r\n    const g = parseInt(hexColor.substr(3, 2), 16);\r\n    const b = parseInt(hexColor.substr(4, 2), 16);\r\n    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n    //matches scss variable $bg-dark-color : $bg-light-color\r\n    return (yiq >= 128) ? '#333' : '#eee';\r\n}","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { rgbToHex, setTextColor } from '../../Helpers/ColorConverters'\r\n\r\nexport interface MenuGradientsProps {\r\n    savedGradient: number[]\r\n}\r\n\r\nconst MenuGradients: React.FC<MenuGradientsProps> = ({ savedGradient }) => {\r\n\r\n    const [currentGradientOne, setCurrentGradientOne] = useState('')\r\n    const [currentGradientTwo, setCurrentGradientTwo] = useState('')\r\n\r\n    //Convert RGB to HEX\r\n    useEffect(() => {\r\n        setCurrentGradientOne(rgbToHex(savedGradient[0], savedGradient[1], savedGradient[2]))\r\n        setCurrentGradientTwo(rgbToHex(savedGradient[3], savedGradient[4], savedGradient[5]))\r\n    }, [savedGradient])\r\n\r\n    return (\r\n        <Fragment>\r\n            {currentGradientOne && currentGradientTwo &&\r\n                <Fragment>\r\n                    <div className='menu_gradient_content-1' style={{ color: setTextColor(currentGradientOne) }}>\r\n                        <span>{`HEX: ${currentGradientOne}`}</span>\r\n                        <span className='menu_gradient_content-rgb'>{`RGB: (${savedGradient[0]}, ${savedGradient[1]}, ${savedGradient[2]})`}</span>\r\n                    </div>\r\n\r\n                    <div className='menu_gradient_content-2' style={{ color: setTextColor(currentGradientTwo) }}>\r\n                        <span>{`HEX: ${currentGradientTwo}`}</span>\r\n                        <span className='menu_gradient_content-rgb'>{`RGB: (${savedGradient[3]}, ${savedGradient[4]}, ${savedGradient[5]})`}</span>\r\n                    </div>\r\n                </Fragment>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MenuGradients;","import React, { useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { IconContext } from '../../Context/IconContext'\r\nimport { removeGradient, saveGradient } from '../../Helpers/localStorage'\r\n\r\nexport interface RemoveGradientBtnProps {\r\n    i: number,\r\n    rawGradient: number[],\r\n    getGradients: (gradient: number[]) => number[],\r\n    setSavedGradients: React.Dispatch<React.SetStateAction<any[]>>\r\n}\r\n\r\nconst RemoveGradientBtn: React.FC<RemoveGradientBtnProps> = ({ i, setSavedGradients, getGradients, rawGradient }) => {\r\n\r\n    const { rgbValues } = useContext(RGBContext)\r\n    const { setCopyIconClass, copyIconClass } = useContext(IconContext)\r\n\r\n    const removeSavedGradient = (startIdx: number, e: React.FormEvent): void => {\r\n        if ((e.target as HTMLDivElement).className === 'fas fa-trash' || (e.target as HTMLButtonElement).className === 'btn removeBtn pointer') {\r\n            const VALUES_PER_GRADIENT = 6\r\n            const index = startIdx * VALUES_PER_GRADIENT\r\n            const removedRgbValues = rawGradient.splice(index, 6)\r\n            removeGradient()\r\n\r\n            //Prevent empty gradient array in localStorage\r\n            if (rawGradient.length > 0)\r\n                saveGradient(rawGradient)\r\n\r\n            //Re-renders Menu\r\n            setSavedGradients(getGradients(rawGradient))\r\n\r\n            //Change save icon if current gradient = the removed, saved, gradient \r\n            if (rgbValues.every((value: number, i: number) => value === removedRgbValues[i]))\r\n                setCopyIconClass({ ...copyIconClass, save: 'far fa-save' })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className='btn removeBtn pointer'\r\n            title='Remove Gradient'\r\n            onClick={(e) => removeSavedGradient(i, e)}>\r\n            <i className=\"fas fa-trash\" />\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default RemoveGradientBtn;","import React, { Fragment, useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { IconContext } from '../../Context/IconContext'\r\nimport MenuGradients from './MenuGradients'\r\nimport RemoveGradientBtn from './RemoveGradientBtn'\r\n\r\nexport interface MapMenuGradientsProps {\r\n    rawGradient: number[],\r\n    savedGradients: any,\r\n    getGradients: (gradient: number[]) => number[],\r\n    setSavedGradients: React.Dispatch<React.SetStateAction<any[]>>\r\n}\r\n\r\nconst MapMenuGradients: React.FC<MapMenuGradientsProps> = ({ savedGradients, setSavedGradients, rawGradient, getGradients }) => {\r\n\r\n    const { setRgbValues } = useContext(RGBContext)\r\n    const { setCopyIconClass, copyIconClass } = useContext(IconContext)\r\n\r\n    const getSavedGradient = (gradient: number[], e: React.FormEvent): void => {\r\n        if ((e.target as HTMLDivElement).className !== 'fas fa-trash' && (e.target as HTMLDivElement).className !== 'btn removeBtn pointer') {\r\n            setRgbValues(gradient)\r\n            setCopyIconClass({ ...copyIconClass, save: 'fas fa-check' })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {savedGradients.map((savedGradient: number[], i: number) => (\r\n                <div key={i} onClick={(e) => getSavedGradient(savedGradient, e)} className='menu_gradient pointer' style={{ background: `linear-gradient(to right, rgba(${savedGradient[0]}, ${savedGradient[1]}, ${savedGradient[2]}, 1), rgba(${savedGradient[3]}, ${savedGradient[4]}, ${savedGradient[5]}, 1))` }}>\r\n                    <div className='menu_gradient_content' >\r\n                        <MenuGradients savedGradient={savedGradient} />\r\n                        <RemoveGradientBtn i={i} setSavedGradients={setSavedGradients} getGradients={getGradients} rawGradient={rawGradient} />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MapMenuGradients;","import React, { useState, useEffect, useContext } from 'react'\r\nimport './Menu.scss'\r\nimport { getGradient } from '../../Helpers/localStorage'\r\nimport { MenuContext } from '../../Context/MenuContext'\r\nimport MapMenuGradients from './MapMenuGradients'\r\n\r\nexport interface MenuProps {\r\n\r\n}\r\n\r\nconst Menu: React.FC<MenuProps> = () => {\r\n\r\n    const rawGradient = JSON.parse(getGradient()!)\r\n    const [savedGradients, setSavedGradients]: any[] = useState([])\r\n\r\n    const { slideMenu } = useContext(MenuContext)\r\n\r\n    const getGradients = (gradient: number[]): number[] => {\r\n        const allSavedGradients: any[] = []\r\n        const TWO_RGB_COUNT = 6\r\n        if (gradient.length > TWO_RGB_COUNT) {\r\n            let i = 0\r\n            while (i < gradient.length) {\r\n                allSavedGradients.push([gradient[i], gradient[i + 1], gradient[i + 2], gradient[i + 3], gradient[i + 4], gradient[i + 5]])\r\n                i = i + TWO_RGB_COUNT\r\n            }\r\n            return allSavedGradients\r\n        } else if (gradient.length === TWO_RGB_COUNT) {\r\n            allSavedGradients.push([...gradient])\r\n            return allSavedGradients\r\n        } else return allSavedGradients\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rawGradient && savedGradients.length * 6 !== rawGradient.length)\r\n            setSavedGradients(getGradients(rawGradient))\r\n        else if (!rawGradient)\r\n            setSavedGradients([])\r\n    }, [rawGradient, savedGradients.length])\r\n\r\n    return (\r\n        <div className={`menu_container ${slideMenu}`}>\r\n\r\n            <h3 className='menu_title'>Saved Gradients</h3>\r\n            <div className='underline'></div>\r\n\r\n            <div className='menu_gradient_container'>\r\n                {savedGradients.length === 0 ?\r\n                    <div className='menu_empty'>No Saved Gradients</div>\r\n                    :\r\n                    <MapMenuGradients savedGradients={savedGradients} setSavedGradients={setSavedGradients} rawGradient={rawGradient} getGradients={getGradients} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React, { useContext, useState } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { IconContext } from '../../Context/IconContext'\r\nimport { setTextColor } from '../../Helpers/ColorConverters'\r\n\r\nexport interface ColorDescriptionProps {\r\n\r\n}\r\n\r\nconst ColorDescription: React.FC<ColorDescriptionProps> = () => {\r\n\r\n    const { rgbValues, colorOneHex, colorTwoHex } = useContext(RGBContext)\r\n    const { copyIconClass, setCopyIconClass } = useContext(IconContext)\r\n\r\n    const [redOne, greenOne, blueOne, redTwo, greenTwo, blueTwo] = rgbValues\r\n\r\n    const [isShowingCopyOne, setIsShowingCopyOne] = useState(false)\r\n    const [isShowingCopyTwo, setIsShowingCopyTwo] = useState(false)\r\n\r\n    const copyHex = (): void => {\r\n        if (isShowingCopyOne && copyIconClass.color_1 !== 'fas fa-check') {\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-check', color_2: 'fas fa-copy' })\r\n            navigator.clipboard.writeText(colorOneHex)\r\n        } else if (isShowingCopyTwo && copyIconClass.color_2 !== 'fas fa-check') {\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-copy', color_2: 'fas fa-check' })\r\n            navigator.clipboard.writeText(colorTwoHex)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='color_container'>\r\n            {colorOneHex && colorTwoHex &&\r\n                <div className='color_flex'>\r\n                    <div\r\n                        className='color-1'\r\n                        style={{ color: setTextColor(colorOneHex) }}>\r\n                        <div\r\n                            onMouseEnter={() => setIsShowingCopyOne(!isShowingCopyOne)}\r\n                            onMouseLeave={() => setIsShowingCopyOne(!isShowingCopyOne)}>\r\n                            <div className='flex reverse-column'>\r\n                                <div className='color-1_values'>{`HEX: ${colorOneHex}`}</div>\r\n                                <div style={{ visibility: isShowingCopyOne ? 'visible' : 'hidden' }}><i className={`${copyIconClass.color_1} icon-absolute pointer`} title='Copy HEX' onClick={() => copyHex()} /></div>\r\n                            </div>\r\n                            <div className='color-1_values'>{`RGB: (${redOne}, ${greenOne}, ${blueOne})`}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        className='color-2'\r\n                        style={{ color: setTextColor(colorTwoHex) }}>\r\n                        <div\r\n                            onMouseEnter={() => setIsShowingCopyTwo(!isShowingCopyTwo)}\r\n                            onMouseLeave={() => setIsShowingCopyTwo(!isShowingCopyTwo)}>\r\n                            <div className='flex'>\r\n                                {<div style={{ visibility: isShowingCopyTwo ? 'visible' : 'hidden' }}><i className={`${copyIconClass.color_2} icon-absolute pointer`} title='Copy HEX' onClick={() => copyHex()} /></div>}\r\n                                <div className='color-2_values'>{`HEX: ${colorTwoHex}`}</div>\r\n                            </div>\r\n                            <div className='color-2_values'>{`RGB: (${redTwo}, ${greenTwo}, ${blueTwo})`}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorDescription;","import React, { useContext } from 'react'\r\nimport './Colors.scss'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { MenuContext } from '../../Context/MenuContext'\r\nimport Menu from '../Menu/Menu'\r\nimport ColorDescription from './ColorDescription'\r\n\r\nexport interface ColorsProps {\r\n\r\n}\r\n\r\nconst Colors: React.FC<ColorsProps> = () => {\r\n\r\n    const { background } = useContext(RGBContext)\r\n    const { isShowingMenu } = useContext(MenuContext)\r\n\r\n    return (\r\n        <div className='color_container' style={{ background }}>\r\n            <ColorDescription />\r\n            {isShowingMenu && <Menu />}\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Colors;","import React, { useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { IconContext } from '../../Context/IconContext'\r\nimport { hexToRgb } from '../../Helpers/ColorConverters'\r\n\r\nexport interface HeaderColorSelectorProps {\r\n\r\n}\r\n\r\nconst HeaderColorSelector: React.FC<HeaderColorSelectorProps> = () => {\r\n\r\n    const { rgbValues, colorOneHex, colorTwoHex, setRgbValues } = useContext(RGBContext)\r\n    const { copyIconClass, setCopyIconClass } = useContext(IconContext)\r\n\r\n    const onChange = (e: React.FormEvent): void => {\r\n        //Get input values\r\n        const hexValue = ((e.target as HTMLInputElement).value)\r\n        const updatedRgbValues = (hexToRgb(hexValue))\r\n        const { r, g, b } = updatedRgbValues!\r\n\r\n        //Update a copy of rgbValues and show updated icons\r\n        const rgbValuescopy = [...rgbValues]\r\n        if ((e.target as HTMLInputElement).name === 'colorOne') {\r\n            rgbValuescopy.splice(0, 3, r, g, b)\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-copy', save: 'far fa-save' })\r\n        }\r\n        else if ((e.target as HTMLInputElement).name === 'colorTwo') {\r\n            rgbValuescopy.splice(3, 3, r, g, b)\r\n            setCopyIconClass({ ...copyIconClass, color_2: 'fas fa-copy', save: 'far fa-save' })\r\n        }\r\n\r\n        //Update rgbValue state\r\n        setRgbValues(rgbValuescopy)\r\n    }\r\n\r\n    return (\r\n        <div className='header_colorSelector'>\r\n            <input className='colorPicker pickerOne' type='color' name='colorOne' value={colorOneHex} onChange={e => onChange(e)} />\r\n            <input className='colorPicker pickerTwo' type='color' name='colorTwo' value={colorTwoHex} onChange={e => onChange(e)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderColorSelector;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext';\r\nimport { MenuContext } from '../../Context/MenuContext';\r\n\r\nexport interface MenuControllerProps {\r\n\r\n}\r\n\r\nconst MenuController: React.FC<MenuControllerProps> = () => {\r\n\r\n    const { background } = useContext(RGBContext)\r\n    const { isShowingMenu, setIsShowingMenu, setSlideMenu } = useContext(MenuContext)\r\n    const menuCssBreakpoint = window.screen.width\r\n    const [isHorizontalArrow, setIsHorizontalArrow] = useState(true)\r\n\r\n    useEffect(() => {\r\n        //If device width <= the menu media query (1350px) \r\n        //that makes menu '.menuSlideUp', set true\r\n        if (menuCssBreakpoint < 1351)\r\n            setIsHorizontalArrow(false)\r\n    }, [menuCssBreakpoint])\r\n\r\n    const openMenu = () => {\r\n        setIsShowingMenu(true)\r\n        setSlideMenu('slideIn')\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        setSlideMenu('slideOut')\r\n        setTimeout(() => setIsShowingMenu(false), 475)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isShowingMenu ?\r\n                <button\r\n                    className='btn pointer'\r\n                    title='Expand Saved Gradients'\r\n                    style={{ background }}\r\n                    onClick={() => closeMenu()}>\r\n                    {isHorizontalArrow ? <i className=\"fas fa-arrow-right\" /> : <i className=\"fas fa-arrow-down\" />}\r\n                </button>\r\n                :\r\n                <button\r\n                    className='btn pointer'\r\n                    title='Expand Saved Gradients'\r\n                    style={{ background }}\r\n                    onClick={() => openMenu()}>\r\n                    {isHorizontalArrow ? <i className=\"fas fa-arrow-left\" /> : <i className=\"fas fa-arrow-up\" />}\r\n                </button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MenuController;","import React, { useContext } from 'react'\r\nimport MenuController from './MenuController'\r\nimport { saveGradient, getGradient } from '../../Helpers/localStorage'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { IconContext } from '../../Context/IconContext'\r\nimport { MenuContext } from '../../Context/MenuContext'\r\n\r\nexport interface HeaderUtilsProps {\r\n    randomRGB: () => number[]\r\n}\r\n\r\nconst HeaderUtils: React.FC<HeaderUtilsProps> = ({ randomRGB }) => {\r\n\r\n    const { rgbValues, background, setRgbValues } = useContext(RGBContext)\r\n    const { copyIconClass, setCopyIconClass } = useContext(IconContext)\r\n    const { isShowingMenu } = useContext(MenuContext)\r\n\r\n    const rawGradient = JSON.parse(getGradient()!)\r\n\r\n    const findNewColors = (): void => {\r\n        setCopyIconClass({ color_1: 'fas fa-copy', color_2: 'fas fa-copy', save: 'far fa-save' })\r\n        setRgbValues(randomRGB())\r\n    }\r\n\r\n    const saveClick = (): void => {\r\n        if (copyIconClass.save !== 'fas fa-check') {\r\n            saveGradient(rgbValues)\r\n            setCopyIconClass({ ...copyIconClass, save: 'fas fa-check' })\r\n        }\r\n    }\r\n\r\n    const isSaveBtnDisabled = (): boolean => {\r\n        if (rawGradient && rawGradient.length > 29) return true\r\n        else if (isShowingMenu) return true\r\n        else return false\r\n    }\r\n\r\n    return (\r\n        <div className='header_util'>\r\n            <button\r\n                className='btn pointer randomPicker'\r\n                title='Random Gradient'\r\n                style={{ background }}\r\n                onClick={() => findNewColors()}\r\n                disabled={isShowingMenu}>\r\n                <i className=\"fas fa-random\" />\r\n            </button>\r\n\r\n            <button\r\n                className='btn saveBtn pointer'\r\n                title='Save Current Gradient'\r\n                style={{ background }}\r\n                onClick={() => saveClick()}\r\n                disabled={isSaveBtnDisabled()}>\r\n                <i className={`${copyIconClass.save}`} />\r\n            </button>\r\n\r\n            <MenuController />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderUtils;","import React from 'react'\r\nimport './Header.scss'\r\nimport HeaderColorSelector from './HeaderColorSelector'\r\nimport HeaderUtils from './HeaderUtils'\r\n\r\nexport interface HeaderProps {\r\n    randomRGB: () => number[]\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ randomRGB }) => {\r\n    return (\r\n        <div className='header'>\r\n            <div className='header_container'>\r\n                <HeaderColorSelector />\r\n                <HeaderUtils randomRGB={randomRGB} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","//  To fix \"--jsx flag\" error. \n//  Press \"CTL Shift P\", \n//  Search for \"Typescript: Select Typescript Version\"\n//  Select \"Use Workspace Version\"\nimport React, { useState, useEffect } from 'react'\nimport './App.scss'\nimport Colors from './Component/Colors/Colors'\nimport Header from './Component/Header/Header'\nimport { RGBContext } from './Context/RGBContext'\nimport { MenuContext } from './Context/MenuContext'\nimport { IconContext } from './Context/IconContext'\nimport { rgbToHex } from './Helpers/ColorConverters'\n\ninterface IRandomRGB {\n  (): number[]\n}\n\nconst randomRGB: IRandomRGB = () => {\n  const redOne = Math.floor(Math.random() * 256)\n  const greenOne = Math.floor(Math.random() * 256)\n  const blueOne = Math.floor(Math.random() * 256)\n  const redTwo = Math.floor(Math.random() * 256)\n  const greenTow = Math.floor(Math.random() * 256)\n  const blueTwo = Math.floor(Math.random() * 256)\n  return [redOne, greenOne, blueOne, redTwo, greenTow, blueTwo]\n}\n\nfunction App() {\n\n  const [rgbValues, setRgbValues] = useState(randomRGB())\n  const [background, setBackground] = useState('')\n  const [isShowingMenu, setIsShowingMenu] = useState(false)\n  const [copyIconClass, setCopyIconClass] = useState({ color_1: 'fas fa-copy', color_2: 'fas fa-copy', save: 'far fa-save' })\n  const [slideMenu, setSlideMenu] = useState('slideIn')\n  const [colorOneHex, setColorOneHex] = useState('')\n  const [colorTwoHex, setColorTwoHex] = useState('')\n\n  useEffect(() => {\n    setBackground(`linear-gradient(to right, rgba(${rgbValues[0]}, ${rgbValues[1]}, ${rgbValues[2]}, 1), rgba(${rgbValues[3]}, ${rgbValues[4]}, ${rgbValues[5]}, 1))`)\n    setColorOneHex(rgbToHex(rgbValues[0], rgbValues[1], rgbValues[2]))\n    setColorTwoHex(rgbToHex(rgbValues[3], rgbValues[4], rgbValues[5]))\n  }, [rgbValues])\n\n  return (\n    <div className=\"App\">\n      <RGBContext.Provider value={{ rgbValues, setRgbValues, colorOneHex, colorTwoHex, background }}>\n        <MenuContext.Provider value={{ slideMenu, isShowingMenu, setSlideMenu, setIsShowingMenu }}>\n          <IconContext.Provider value={{ copyIconClass, setCopyIconClass }}>\n\n            <Header randomRGB={randomRGB} />\n            <Colors />\n\n          </IconContext.Provider>\n        </MenuContext.Provider>\n      </RGBContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}