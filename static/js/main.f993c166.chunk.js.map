{"version":3,"sources":["Helpers/ColorConverters.ts","Context/RGBContext.tsx","Helpers/localStorage.ts","Component/Menu/MenuGradients.tsx","Component/Menu/RemoveGradientBtn.tsx","Component/Menu/MapMenuGradients.tsx","Component/Menu/Menu.tsx","Component/Colors/Colors.tsx","Component/Header/HeaderColorSelector.tsx","Component/Header/MenuController.tsx","Component/Header/HeaderUtils.tsx","Component/Header/Header.tsx","App.tsx","index.tsx"],"names":["componentToHex","component","hex","toString","length","rgbToHex","red","green","blue","setTextColor","hexColor","parseInt","substr","RGBContext","createContext","setRgbValues","setCopyIconClass","setIsShowingMenu","setSlideMenu","rgbValues","background","slideMenu","copyIconClass","color_1","color_2","save","isShowingMenu","getGradient","localStorage","getItem","saveGradient","gradient","oldGradient","JSON","parse","slice","every","value","i","updatedGradient","setItem","stringify","MenuGradients","className","style","color","RemoveGradientBtn","setGradients","getGradients","rawGradient","useContext","removeSavedGradient","startIdx","e","target","index","removedRgbValues","splice","removeItem","title","onClick","MapMenuGradients","gradients","map","getSavedGradient","Menu","useState","allSavedGradients","push","useEffect","Colors","redOne","greenOne","blueOne","redTwo","greenTwo","blueTwo","colorOneHex","setColorOneHex","colorTwoHex","setColorTwoHex","isShowingCopyOne","setIsShowingCopyOne","isShowingCopyTwo","setIsShowingCopyTwo","copyHex","navigator","clipboard","writeText","onMouseEnter","onMouseLeave","visibility","HeaderColorSelector","onChange","result","exec","r","g","b","hexToRgb","rgbValuescopy","name","type","MenuController","setTimeout","HeaderUtils","randomRGB","disabled","Header","Math","floor","random","App","setBackground","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f993c166.chunk.js","sourcesContent":["interface IHexToRgb {\r\n    r: number,\r\n    g: number,\r\n    b: number\r\n}\r\n\r\nconst componentToHex = (component: number): string => {\r\n    // Hex color code a base 16 number\r\n    const hex = component.toString(16)\r\n    return hex.length === 1 ? '0' + hex : hex\r\n}\r\n\r\nexport const rgbToHex = (red: number, green: number, blue: number): string =>\r\n    `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`\r\n\r\nexport const hexToRgb = (hex: string): IHexToRgb | null => {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : null;\r\n}\r\n\r\nexport const setTextColor = (hexColor: string): string => {\r\n    const r = parseInt(hexColor.substr(1, 2), 16);\r\n    const g = parseInt(hexColor.substr(3, 2), 16);\r\n    const b = parseInt(hexColor.substr(4, 2), 16);\r\n    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n    //matches scss variable $bg-dark-color : $bg-light-color\r\n    return (yiq >= 128) ? '#333' : '#eee';\r\n}","import { createContext } from 'react'\r\n\r\ninterface IContext {\r\n    rgbValues: number[]\r\n    background: string,\r\n    copyIconClass: { color_1: string; color_2: string; save: string },\r\n    slideMenu: string,\r\n    isShowingMenu: boolean,\r\n    setRgbValues: React.Dispatch<React.SetStateAction<number[]>>,\r\n    setCopyIconClass: React.Dispatch<React.SetStateAction<{ color_1: string; color_2: string; save: string }>>\r\n    setSlideMenu: React.Dispatch<React.SetStateAction<string>>,\r\n    setIsShowingMenu: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const RGBContext = createContext<IContext>({\r\n    setRgbValues: () => { },\r\n    setCopyIconClass: () => { },\r\n    setIsShowingMenu: () => { },\r\n    setSlideMenu: () => { },\r\n    rgbValues: [0, 0, 0],\r\n    background: '',\r\n    slideMenu: '',\r\n    copyIconClass: { color_1: '', color_2: '', save: '' },\r\n    isShowingMenu: false\r\n})","export const getGradient = (): string | null => localStorage.getItem('gradient')\r\n\r\nexport const removeGradient = (): void => localStorage.removeItem('gradient')\r\n\r\nexport const saveGradient = (rgbValues: number[]): void => {\r\n    const gradient = getGradient()\r\n    if (!gradient) localStorage.setItem('gradient', JSON.stringify(rgbValues))\r\n    else {\r\n        const oldGradient = JSON.parse(gradient)\r\n        const latestGradient = oldGradient.slice(oldGradient.length - 6)\r\n        if (latestGradient.every((value: number, i: number) => value === rgbValues[i]))\r\n            return\r\n\r\n        const updatedGradient = ([...oldGradient, ...rgbValues])\r\n        //Allow up to 5 saved Gradients\r\n        if (updatedGradient.length < 31)\r\n            localStorage.setItem('gradient', JSON.stringify(updatedGradient))\r\n    }\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { rgbToHex, setTextColor } from '../../Helpers/ColorConverters'\r\n\r\nexport interface MenuGradientsProps {\r\n    gradient: number[]\r\n}\r\n\r\nconst MenuGradients: React.FC<MenuGradientsProps> = ({ gradient }) => {\r\n    return (\r\n        <Fragment>\r\n            <div className='menu_gradient_content-1' style={{ color: setTextColor(rgbToHex(gradient[0], gradient[1], gradient[2])) }}>\r\n                <span>{`HEX: ${rgbToHex(gradient[0], gradient[1], gradient[2])}`}</span>\r\n                <span className='menu_gradient_content-rgb'>{`RGB: (${gradient[0]}, ${gradient[1]}, ${gradient[2]})`}</span>\r\n            </div>\r\n\r\n            <div className='menu_gradient_content-2' style={{ color: setTextColor(rgbToHex(gradient[3], gradient[4], gradient[5])) }}>\r\n                <span>{`HEX: ${rgbToHex(gradient[3], gradient[4], gradient[5])}`}</span>\r\n                <span className='menu_gradient_content-rgb'>{`RGB: (${gradient[3]}, ${gradient[4]}, ${gradient[5]})`}</span>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MenuGradients;","import React, { useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { removeGradient, saveGradient } from '../../Helpers/localStorage'\r\n\r\nexport interface RemoveGradientBtnProps {\r\n    i: number,\r\n    rawGradient: number[],\r\n    getGradients: (gradient: number[]) => number[],\r\n    setGradients: React.Dispatch<React.SetStateAction<any[]>>\r\n}\r\n\r\nconst RemoveGradientBtn: React.FC<RemoveGradientBtnProps> = ({ i, setGradients, getGradients, rawGradient }) => {\r\n\r\n    const { rgbValues, setCopyIconClass, copyIconClass } = useContext(RGBContext)\r\n\r\n    const removeSavedGradient = (startIdx: number, e: React.FormEvent): void => {\r\n        if ((e.target as HTMLDivElement).className === 'fas fa-trash' || (e.target as HTMLButtonElement).className === 'btn removeBtn pointer') {\r\n            const VALUES_PER_GRADIENT = 6\r\n            const index = startIdx * VALUES_PER_GRADIENT\r\n            const removedRgbValues = rawGradient.splice(index, 6)\r\n            removeGradient()\r\n\r\n            //Prevent empty gradient array in localStorage\r\n            if (rawGradient.length > 0)\r\n                saveGradient(rawGradient)\r\n\r\n            //Re-renders Menu\r\n            setGradients(getGradients(rawGradient))\r\n\r\n            //Change save icon if current gradient = the removed, saved, gradient \r\n            if (rgbValues.every((value: number, i: number) => value === removedRgbValues[i]))\r\n                setCopyIconClass({ ...copyIconClass, save: 'far fa-save' })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className='btn removeBtn pointer'\r\n            title='Remove Gradient'\r\n            onClick={(e) => removeSavedGradient(i, e)}>\r\n            <i className=\"fas fa-trash\" />\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default RemoveGradientBtn;","import React, { Fragment, useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport MenuGradients from './MenuGradients'\r\nimport RemoveGradientBtn from './RemoveGradientBtn'\r\n\r\n\r\nexport interface MapMenuGradientsProps {\r\n    rawGradient: number[],\r\n    gradients: any,\r\n    getGradients: (gradient: number[]) => number[],\r\n    setGradients: React.Dispatch<React.SetStateAction<any[]>>\r\n}\r\n\r\nconst MapMenuGradients: React.FC<MapMenuGradientsProps> = ({ gradients, setGradients, rawGradient, getGradients }) => {\r\n\r\n    const { setCopyIconClass, copyIconClass, setRgbValues } = useContext(RGBContext)\r\n\r\n    const getSavedGradient = (gradient: number[], e: React.FormEvent): void => {\r\n        if ((e.target as HTMLDivElement).className !== 'fas fa-trash' && (e.target as HTMLDivElement).className !== 'btn removeBtn pointer') {\r\n            setRgbValues(gradient)\r\n            setCopyIconClass({ ...copyIconClass, save: 'fas fa-check' })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {gradients.map((gradient: number[], i: number) => (\r\n                <div key={i} onClick={(e) => getSavedGradient(gradient, e)} className='menu_gradient pointer' style={{ background: `linear-gradient(to right, rgba(${gradient[0]}, ${gradient[1]}, ${gradient[2]}, 1), rgba(${gradient[3]}, ${gradient[4]}, ${gradient[5]}, 1))` }}>\r\n                    <div className='menu_gradient_content' >\r\n                        <MenuGradients gradient={gradient} />\r\n                        <RemoveGradientBtn i={i} setGradients={setGradients} getGradients={getGradients} rawGradient={rawGradient} />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MapMenuGradients;","import React, { useState, useEffect, useContext } from 'react'\r\nimport './Menu.scss'\r\nimport { getGradient } from '../../Helpers/localStorage'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport MapMenuGradients from './MapMenuGradients'\r\n\r\nexport interface MenuProps {\r\n\r\n}\r\n\r\nconst Menu: React.FC<MenuProps> = () => {\r\n\r\n    const rawGradient = JSON.parse(getGradient()!)\r\n    const [gradients, setGradients]: any[] = useState([])\r\n\r\n    const { slideMenu } = useContext(RGBContext)\r\n\r\n    const getGradients = (gradient: number[]): number[] => {\r\n        const allSavedGradients: any[] = []\r\n        const TWO_RGB_COUNT = 6\r\n        if (gradient.length > TWO_RGB_COUNT) {\r\n            let i = 0\r\n            while (i < gradient.length) {\r\n                allSavedGradients.push([gradient[i], gradient[i + 1], gradient[i + 2], gradient[i + 3], gradient[i + 4], gradient[i + 5]])\r\n                i = i + TWO_RGB_COUNT\r\n            }\r\n            return allSavedGradients\r\n        } else if (gradient.length === TWO_RGB_COUNT) {\r\n            allSavedGradients.push([...gradient])\r\n            return allSavedGradients\r\n        } else return allSavedGradients\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rawGradient && gradients.length * 6 !== rawGradient.length)\r\n            setGradients(getGradients(rawGradient))\r\n        else if (!rawGradient)\r\n            setGradients([])\r\n    }, [rawGradient, gradients.length])\r\n\r\n    return (\r\n        <div className={`menu_container ${slideMenu}`}>\r\n\r\n            <h3 className='menu_title'>Saved Gradients</h3>\r\n            <div className='underline'></div>\r\n\r\n            <div className='menu_gradient_container'>\r\n                {gradients.length === 0 ?\r\n                    <div className='menu_empty'>No Saved Gradients</div>\r\n                    :\r\n                    <MapMenuGradients gradients={gradients} setGradients={setGradients} rawGradient={rawGradient} getGradients={getGradients} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React, { useEffect, useState, useContext } from 'react'\r\nimport './Colors.scss'\r\nimport { setTextColor, rgbToHex } from '../../Helpers/ColorConverters'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport Menu from '../Menu/Menu'\r\n\r\nexport interface ColorsProps {\r\n\r\n}\r\n\r\nconst Colors: React.FC<ColorsProps> = () => {\r\n\r\n    const { rgbValues, background, copyIconClass, setCopyIconClass, isShowingMenu } = useContext(RGBContext)\r\n\r\n    const [redOne, greenOne, blueOne, redTwo, greenTwo, blueTwo] = rgbValues\r\n\r\n    const [colorOneHex, setColorOneHex] = useState('')\r\n    const [colorTwoHex, setColorTwoHex] = useState('')\r\n    const [isShowingCopyOne, setIsShowingCopyOne] = useState(false)\r\n    const [isShowingCopyTwo, setIsShowingCopyTwo] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setColorOneHex(rgbToHex(redOne, greenOne, blueOne))\r\n        setColorTwoHex(rgbToHex(redTwo, greenTwo, blueTwo))\r\n    }, [redOne, redTwo, greenOne, greenTwo, blueOne, blueTwo])\r\n\r\n    const copyHex = (): void => {\r\n        if (isShowingCopyOne && copyIconClass.color_1 !== 'fas fa-check') {\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-check', color_2: 'fas fa-copy' })\r\n            navigator.clipboard.writeText(colorOneHex)\r\n        } else if (isShowingCopyTwo && copyIconClass.color_2 !== 'fas fa-check') {\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-copy', color_2: 'fas fa-check' })\r\n            navigator.clipboard.writeText(colorTwoHex)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='color_container' style={{ background }}>\r\n            {isShowingMenu && <Menu />}\r\n            <div\r\n                className='color-1'\r\n                style={{ color: setTextColor(colorOneHex) }}>\r\n                <div\r\n                    onMouseEnter={() => setIsShowingCopyOne(!isShowingCopyOne)}\r\n                    onMouseLeave={() => setIsShowingCopyOne(!isShowingCopyOne)}>\r\n                    <div className='flex reverse-column'>\r\n                        <div className='color-1_values'>{`HEX: ${colorOneHex}`}</div>\r\n                        <div style={{ visibility: isShowingCopyOne ? 'visible' : 'hidden' }}><i className={`${copyIconClass.color_1} icon-absolute pointer`} title='Copy HEX' onClick={() => copyHex()} /></div>\r\n                    </div>\r\n                    <div className='color-1_values'>{`RGB: (${redOne}, ${greenOne}, ${blueOne})`}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div\r\n                className='color-2'\r\n                style={{ color: setTextColor(colorTwoHex) }}>\r\n                <div\r\n                    onMouseEnter={() => setIsShowingCopyTwo(!isShowingCopyTwo)}\r\n                    onMouseLeave={() => setIsShowingCopyTwo(!isShowingCopyTwo)}>\r\n                    <div className='flex'>\r\n                        {<div style={{ visibility: isShowingCopyTwo ? 'visible' : 'hidden' }}><i className={`${copyIconClass.color_2} icon-absolute pointer`} title='Copy HEX' onClick={() => copyHex()} /></div>}\r\n                        <div className='color-2_values'>{`HEX: ${colorTwoHex}`}</div>\r\n                    </div>\r\n                    <div className='color-2_values'>{`RGB: (${redTwo}, ${greenTwo}, ${blueTwo})`}</div>\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Colors;","import React, { useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\nimport { hexToRgb, rgbToHex } from '../../Helpers/ColorConverters'\r\n\r\nexport interface HeaderColorSelectorProps {\r\n\r\n}\r\n\r\nconst HeaderColorSelector: React.FC<HeaderColorSelectorProps> = () => {\r\n\r\n    const { rgbValues, setRgbValues, copyIconClass, setCopyIconClass } = useContext(RGBContext)\r\n\r\n    const [redOne, greenOne, blueOne, redTwo, greenTwo, blueTwo] = rgbValues\r\n\r\n    const onChange = (e: React.FormEvent): void => {\r\n        //Get input values\r\n        const hexValue = ((e.target as HTMLInputElement).value)\r\n        const updatedRgbValues = (hexToRgb(hexValue))\r\n        const { r, g, b } = updatedRgbValues!\r\n\r\n        //Update a copy of rgbValues and show updated icons\r\n        const rgbValuescopy = [...rgbValues]\r\n        if ((e.target as HTMLInputElement).name === 'colorOne') {\r\n            rgbValuescopy.splice(0, 3, r, g, b)\r\n            setCopyIconClass({ ...copyIconClass, color_1: 'fas fa-copy', save: 'far fa-save' })\r\n        }\r\n        else if ((e.target as HTMLInputElement).name === 'colorTwo') {\r\n            rgbValuescopy.splice(3, 3, r, g, b)\r\n            setCopyIconClass({ ...copyIconClass, color_2: 'fas fa-copy', save: 'far fa-save' })\r\n        }\r\n\r\n        //Update rgbValue state\r\n        setRgbValues(rgbValuescopy)\r\n    }\r\n\r\n    return (\r\n        <div className='header_colorSelector'>\r\n            <input className='colorPicker pickerOne' type='color' name='colorOne' value={rgbToHex(redOne, greenOne, blueOne)} onChange={e => onChange(e)} />\r\n            <input className='colorPicker pickerTwo' type='color' name='colorTwo' value={rgbToHex(redTwo, greenTwo, blueTwo)} onChange={e => onChange(e)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderColorSelector;","import React, { useContext } from 'react'\r\nimport { RGBContext } from '../../Context/RGBContext';\r\n\r\nexport interface MenuControllerProps {\r\n\r\n}\r\n\r\nconst MenuController: React.FC<MenuControllerProps> = () => {\r\n\r\n    const { isShowingMenu, setIsShowingMenu, background, setSlideMenu } = useContext(RGBContext)\r\n\r\n    const openMenu = () => {\r\n        setIsShowingMenu(true)\r\n        setSlideMenu('slideIn')\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        setSlideMenu('slideOut')\r\n        setTimeout(() => setIsShowingMenu(false), 475)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isShowingMenu ?\r\n                <button\r\n                    className='btn pointer'\r\n                    title='Expand Saved Gradients'\r\n                    style={{ background }}\r\n                    onClick={() => closeMenu()}>\r\n                    <i className=\"fas fa-arrow-right\" />\r\n                </button>\r\n                :\r\n                <button\r\n                    className='btn pointer'\r\n                    title='Expand Saved Gradients'\r\n                    style={{ background }}\r\n                    onClick={() => openMenu()}>\r\n                    <i className=\"fas fa-arrow-left\" />\r\n                </button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MenuController;","import React, { useContext } from 'react'\r\nimport MenuController from './MenuController'\r\nimport { saveGradient, getGradient } from '../../Helpers/localStorage'\r\nimport { RGBContext } from '../../Context/RGBContext'\r\n\r\nexport interface HeaderUtilsProps {\r\n    randomRGB: () => number[]\r\n}\r\n\r\nconst HeaderUtils: React.FC<HeaderUtilsProps> = ({ randomRGB }) => {\r\n\r\n    const { rgbValues, background, copyIconClass, setCopyIconClass, isShowingMenu, setRgbValues } = useContext(RGBContext)\r\n    const rawGradient = JSON.parse(getGradient()!)\r\n\r\n    const findNewColors = (): void => {\r\n        setCopyIconClass({ color_1: 'fas fa-copy', color_2: 'fas fa-copy', save: 'far fa-save' })\r\n        setRgbValues(randomRGB())\r\n    }\r\n\r\n    const saveClick = (): void => {\r\n        if (copyIconClass.save !== 'fas fa-check') {\r\n            saveGradient(rgbValues)\r\n            setCopyIconClass({ ...copyIconClass, save: 'fas fa-check' })\r\n        }\r\n    }\r\n\r\n    const isSaveBtnDisabled = (): boolean => {\r\n        if (rawGradient && rawGradient.length > 29) return true\r\n        else if (isShowingMenu) return true\r\n        else return false\r\n    }\r\n\r\n    return (\r\n        <div className='header_util'>\r\n            <button\r\n                className='btn pointer randomPicker'\r\n                title='Random Gradient'\r\n                style={{ background }}\r\n                onClick={() => findNewColors()}\r\n                disabled={isShowingMenu}>\r\n                <i className=\"fas fa-random\" />\r\n            </button>\r\n\r\n            <button\r\n                className='btn saveBtn pointer'\r\n                title='Save Current Gradient'\r\n                style={{ background }}\r\n                onClick={() => saveClick()}\r\n                disabled={isSaveBtnDisabled()}>\r\n                <i className={`${copyIconClass.save}`} />\r\n            </button>\r\n\r\n            <MenuController />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderUtils;","import React from 'react'\r\nimport './Header.scss'\r\nimport HeaderColorSelector from './HeaderColorSelector'\r\nimport HeaderUtils from './HeaderUtils'\r\n\r\nexport interface HeaderProps {\r\n    randomRGB: () => number[]\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ randomRGB }) => {\r\n    return (\r\n        <div className='header'>\r\n            <div className='header_container'>\r\n                <HeaderColorSelector />\r\n                <HeaderUtils randomRGB={randomRGB} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","//  To fix \"--jsx flag\" error. \n//  Press \"CTL Shift P\", \n//  Search for \"Typescript: Select Typescript Version\"\n//  Select \"Use Workspace Version\"\nimport React, { useState, useEffect } from 'react'\nimport './App.scss'\nimport Colors from './Component/Colors/Colors'\nimport Header from './Component/Header/Header'\nimport { RGBContext } from './Context/RGBContext'\n\ninterface IRandomRGB {\n  (): number[]\n}\n\nconst randomRGB: IRandomRGB = () => {\n  const redOne = Math.floor(Math.random() * 256)\n  const greenOne = Math.floor(Math.random() * 256)\n  const blueOne = Math.floor(Math.random() * 256)\n  const redTwo = Math.floor(Math.random() * 256)\n  const greenTow = Math.floor(Math.random() * 256)\n  const blueTwo = Math.floor(Math.random() * 256)\n  return [redOne, greenOne, blueOne, redTwo, greenTow, blueTwo]\n}\n\nfunction App() {\n\n  const [rgbValues, setRgbValues] = useState(randomRGB())\n  const [background, setBackground] = useState('')\n  const [isShowingMenu, setIsShowingMenu] = useState(false)\n  const [copyIconClass, setCopyIconClass] = useState({ color_1: 'fas fa-copy', color_2: 'fas fa-copy', save: 'far fa-save' })\n  const [slideMenu, setSlideMenu] = useState('slideIn')\n\n  useEffect(() => {\n    setBackground(`linear-gradient(to right, rgba(${rgbValues[0]}, ${rgbValues[1]}, ${rgbValues[2]}, 1), rgba(${rgbValues[3]}, ${rgbValues[4]}, ${rgbValues[5]}, 1))`)\n  }, [rgbValues])\n\n  return (\n    <div className=\"App\">\n      <RGBContext.Provider value={{ rgbValues, setRgbValues, background, copyIconClass, setCopyIconClass, isShowingMenu, setIsShowingMenu, slideMenu, setSlideMenu }}>\n        <Header randomRGB={randomRGB} />\n        <Colors />\n      </RGBContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}